# app.py ‚Äî Flask + Telebot Webhook-–±–æ—Ç —Å –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
import os
import json
import datetime
import math
from flask import Flask, request
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from calendar_handler import generate_calendar, handle_calendar_callback

API_TOKEN = os.environ.get("TELEGRAM_API_TOKEN") or "<–¢–û–ö–ï–ù>"
WEBHOOK_URL = os.environ.get("WEBHOOK_URL") or "https://<render-subdomain>.onrender.com/webhook"
ADMIN_ID = 374897465

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)

user_data = {}
with open("car_photos.json", "r") as f:
    car_photos = json.load(f)

categories = [
    ("compact.jpg", "üöó –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∞–≤—Ç–æ\n‚úÖ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –≥–æ—Ä–æ–¥–∞. –≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —Ä–∞—Å—Ö–æ–¥, –º–∞–ª—ã–µ –≥–∞–±–∞—Ä–∏—Ç—ã –∏ —É–¥–æ–±–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞.", "class_compact"),
    ("sedan.jpg", "üöò –°–µ–¥–∞–Ω—ã —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–ª–∞—Å—Å–∞\n‚úÖ –ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ, –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–≥–∞–∂–Ω–∏–∫. –û—Ç–ª–∏—á–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–∏—Ö –ø–æ–µ–∑–¥–æ–∫. –≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —Ä–∞—Å—Ö–æ–¥, –º–∞–ª—ã–µ –≥–∞–±–∞—Ä–∏—Ç—ã –∏ —É–¥–æ–±–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞","class_sedan"),
    ("parket.png", "üöô –ü–∞—Ä–∫–µ—Ç–Ω–∏–∫–∏ \n‚úÖ –í—ã—Å–æ–∫–∏–π –∫–ª–∏—Ä–µ–Ω—Å. –ú–æ–≥—É—Ç –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ","class_crossover"),
    ("7-seat.jpeg", "üöê SUV –∏ –º–∏–Ω–∏–≤–µ–Ω—ã (7 –º–µ—Å—Ç)\n‚úÖ –î–ª—è —Å–µ–º—å–∏ –∏ –±–æ–ª—å—à–æ–π –∫–æ–º–ø–∞–Ω–∏–∏", "class_suv")
]

def safe_delete(chat_id, message_id):
    try:
        bot.delete_message(chat_id, message_id)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {}
    for msg_id in user_data[chat_id].get('history', []):
        safe_delete(chat_id, msg_id)
    user_data[chat_id]['history'] = []

    with open("1.png", "rb") as step_image:
        msg = bot.send_photo(chat_id, step_image)
        user_data[chat_id]['history'].append(msg.message_id)

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üöó –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="start_booking"))
    msg2 = bot.send_message(chat_id, "–°–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º –≤—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?", reply_markup=markup)
    user_data[chat_id]['history'].append(msg2.message_id)


@bot.callback_query_handler(func=lambda call: call.data == "start_booking")
def handle_start_booking(call):
    chat_id = call.message.chat.id

    for msg_id in user_data[chat_id].get('history', []):
        safe_delete(chat_id, msg_id)
    user_data[chat_id]['history'] = []

    with open("2.png", "rb") as step_image:
        msg = bot.send_photo(chat_id, step_image)
#        caption = "üìç *–®–∞–≥2 –∏–∑ 5*\n\n–í—ã–±–µ—Ä–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ñ–æ—Ä–º–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è"
#        msg = bot.send_photo(chat_id, step_image, caption=caption, parse_mode="Markdown")
        user_data[chat_id]['history'].append(msg.message_id)


    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_to_step1"),
        InlineKeyboardButton("üìã –û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞–≤—Ç–æ", callback_data="categories_page_1")
    )
    msg2 = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)
    user_data[chat_id]['history'].append(msg2.message_id)
    
@bot.callback_query_handler(func=lambda call: call.data == "categories_page_1")
def categories_page_1(call):
    chat_id = call.message.chat.id
    for msg_id in user_data[chat_id].get('history', []):
        safe_delete(chat_id, msg_id)
    user_data[chat_id]['history'] = []

    for i in range(4):  # compact –∏ sedan
        img_path, caption, callback = categories[i]
        with open(img_path, "rb") as photo:
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å", callback_data=callback))
            msg = bot.send_photo(chat_id, photo, caption=caption, reply_markup=markup)
            user_data[chat_id]['history'].append(msg.message_id)

def generate_summary(chat_id):
    data = user_data.get(chat_id, {})
    lines = []
    if 'car' in data:
        lines.append(f"üöò *–ê–≤—Ç–æ:* {data['car']}")
    if 'start_obj' in data:
        lines.append(f"üìÖ *–°:* {data['start_obj'].strftime('%d.%m.%Y')}")
    if 'end_obj' in data:
        lines.append(f"üìÖ *–ü–æ:* {data['end_obj'].strftime('%d.%m.%Y')}")
    if 'delivery' in data:
        delivery = "üè† –î–æ–º / –û—Ç–µ–ª—å" if data['delivery'] == "home" else "‚úàÔ∏è –ê—ç—Ä–æ–ø–æ—Ä—Ç"
        lines.append(f"üìç *–î–æ—Å—Ç–∞–≤–∫–∞:* {delivery}")
    if 'contact' in data:
        lines.append(f"üì± *–ö–æ–Ω—Ç–∞–∫—Ç:* {data['contact']}")
    return "\n".join(lines) if lines else "üì≠ –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ."

@bot.callback_query_handler(func=lambda call: call.data == "go_to_step1")
def go_back_to_step1(call):
    chat_id = call.message.chat.id
    for msg_id in user_data[chat_id].get('history', []):
        safe_delete(chat_id, msg_id)
    user_data[chat_id]['history'] = []

    with open("1.png", "rb") as step_image:
        msg = bot.send_photo(chat_id, step_image)
        user_data[chat_id]['history'].append(msg.message_id)

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üöó –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="start_booking"))
    msg2 = bot.send_message(chat_id, "–°–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?", reply_markup=markup)
    user_data[chat_id]['history'].append(msg2.message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("class_"))
def choose_class(call):
    chat_id = call.message.chat.id
    class_selected = call.data.split("_", 1)[1]
    for msg_id in user_data[chat_id].get('history', []):
        safe_delete(chat_id, msg_id)
    user_data[chat_id]['history'] = []
    

    with open("3.png", "rb") as step_image:
        caption = "üìç *–®–∞–≥ 3 –∏–∑ 5*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è"
        msg = bot.send_photo(chat_id, step_image, caption=caption, parse_mode="Markdown")
        user_data[chat_id]['history'].append(msg.message_id)
    show_cars_by_class(chat_id, class_selected, page=1, with_navigation=True)#show step-3 image
    
@bot.callback_query_handler(func=lambda call: call.data.startswith("cars_"))
def handle_car_page(call):
    chat_id = call.message.chat.id
    try:
        _, car_class, _, page = call.data.split("_")
        page = int(page)
    except:
        return  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    for msg_id in user_data[chat_id].get('history', []):
        safe_delete(chat_id, msg_id)
    user_data[chat_id]['history'] = []

    show_cars_by_class(chat_id, car_class, page, with_navigation=True)


# üîá –í—ã–≤–æ–¥ –º–∞—à–∏–Ω –ø–æ –∫–ª–∞—Å—Å—É –∏–∑ JSON
def show_cars_by_class(chat_id, car_class, page, with_navigation=True):
    cars = [name for name, data in car_photos.items() if data['class'] == car_class]
    cars.sort()
    per_page = 3
    start = (page - 1) * per_page
    end = start + per_page
    cars_on_page = cars[start:end]

    for car_name in cars_on_page:
        data = car_photos[car_name]
        with open(data['cover'], 'rb') as photo:
            caption = f"üöó {car_name}\n{data['description']}\nüí∏ 800‚Äì400‡∏ø/—Å—É—Ç–∫–∏ (—á–µ–º –¥–æ–ª—å—à–µ, —Ç–µ–º –¥–µ—à–µ–≤–ª–µ)"
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã", callback_data=f"book_{car_name}"))
            msg = bot.send_photo(chat_id, photo, caption=caption, reply_markup=markup)
            user_data[chat_id]['history'].append(msg.message_id)

    if with_navigation:
        total_pages = math.ceil(len(cars) / per_page)
        nav = InlineKeyboardMarkup()
        if page > 1:
            nav.add(InlineKeyboardButton("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—à–ª–æ–º—É —Å–ø–∏—Å–∫—É", callback_data=f"cars_{car_class}_page_{page - 1}"))
        if end < len(cars):
            nav.add(InlineKeyboardButton("‚û°Ô∏è –ï—â–µ 3 –∞–≤—Ç–æ", callback_data=f"cars_{car_class}_page_{page + 1}"))
        nav.add(InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ", callback_data="go_to_categories"))
        nav_msg = bot.send_message(chat_id, f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}", reply_markup=nav)
        user_data[chat_id]['history'].append(nav_msg.message_id)

@bot.callback_query_handler(func=lambda call: call.data == "go_to_categories")
def return_to_categories(call):
    chat_id = call.message.chat.id
    for msg_id in user_data[chat_id].get("history", []):
        safe_delete(chat_id, msg_id)
    user_data[chat_id]["history"] = []

    with open("2.png", "rb") as step_image:
        msg = bot.send_photo(chat_id, step_image)
        user_data[chat_id]["history"].append(msg.message_id)

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞–≤—Ç–æ", callback_data="categories_page_1")
    )
    user_data[chat_id]["history"].append(
        bot.send_message(chat_id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ:", reply_markup=markup).message_id
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("book_"))
def choose_car(call):
    chat_id = call.message.chat.id
    car_name = call.data.split("_", 1)[1]
    user_data[chat_id] = user_data.get(chat_id, {})
    user_data[chat_id]['car'] = car_name

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for msg_id in user_data[chat_id].get("history", []):
        safe_delete(chat_id, msg_id)
    user_data[chat_id]['history'] = []
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ + –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ reply_markup
    with open("calendar_start.png", "rb") as photo:
        today = datetime.date.today()
        markup = generate_calendar("start", today.year, today.month, chat_id, user_data)
        msg = bot.send_photo(
            chat_id,
            photo,
            caption="üìÖ –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã:",
            reply_markup=markup
        )
       
        user_data[chat_id]['history'].append(msg.message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("cal_") or call.data.startswith("prev") or call.data.startswith("next") or call.data.startswith("delivery"))
def handle_all_calendar_callbacks(call):
    chat_id = call.from_user.id
    if chat_id not in user_data:
        user_data[chat_id] = {}
    handle_calendar_callback(call, user_data, bot)

@bot.callback_query_handler(func=lambda call: call.data.startswith("contact_"))
def handle_contact_choice(call):
    chat_id = call.message.chat.id
    contact_type = call.data.split("_", 1)[1]

    if contact_type == "telegram":
        username = call.from_user.username
        if username:
            user_data[chat_id]['contact'] = "@" + username
            finalize_booking(chat_id)
        else:
            bot.edit_message_text(chat_id, call.message.message_id, "‚ùå –£–∫–∞–∂–∏ username –≤ Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

    elif contact_type == "whatsapp":
        user_data[chat_id]['phone_input'] = ""
        user_data[chat_id]['awaiting_phone'] = True
        user_data[chat_id]['phone_msg_id'] = None

        markup = InlineKeyboardMarkup()
        for row in [["1", "2", "3"], ["4", "5", "6"], ["7", "8", "9"], ["+", "0", "DEL"], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]]:
            markup.row(*[InlineKeyboardButton(btn, callback_data=f"num_{btn}") for btn in row])

        msg = bot.send_message(chat_id, "üìû –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä WhatsApp:", reply_markup=markup)
        user_data[chat_id]['phone_msg_id'] = msg.message_id
        user_data[chat_id]['history'].append(msg.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("num_"))
def handle_inline_number(call):
    chat_id = call.message.chat.id
    digit = call.data.split("_", 1)[1]
    data = user_data[chat_id]

    if digit == "DEL":
        data['phone_input'] = data['phone_input'][:-1]
    elif digit == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        final = data.get('phone_input', '')
        if final:
            data['contact'] = final
            data['awaiting_phone'] = False
            for msg_id in data.get('history', []):
                safe_delete(chat_id, msg_id)
            data['history'] = []
            finalize_booking(chat_id)
        else:
            bot.answer_callback_query(call.id, "–ù–æ–º–µ—Ä –ø—É—Å—Ç.")
        return
    else:
        data['phone_input'] += digit

    max_length = 15
    padded = data['phone_input'] + '‚Ä¢' * (max_length - len(data['phone_input']))
    phone_display = f"–ù–æ–º–µ—Ä: {padded}\n\n–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞"

    try:
        bot.edit_message_text(phone_display, chat_id, data['phone_msg_id'], reply_markup=call.message.reply_markup)
    except:
        pass

def finalize_booking(chat_id):
    data = user_data[chat_id]
    delivery = "üè† –û—Ç–µ–ª—å / –î–æ–º / –í–∏–ª–ª–∞" if data.get('delivery') == 'home' else "‚úàÔ∏è –ê—ç—Ä–æ–ø–æ—Ä—Ç"
    start = data.get('start_obj')
    end = data.get('end_obj')
    start_str = start.strftime("%d.%m.%Y")
    end_str = end.strftime("%d.%m.%Y")
    deposit = 5000 if "Toyota" in data['car'] or "Honda" in data['car'] else 10000
    delivery_fee = 1000
    total = data['total_price'] + deposit + delivery_fee

    text = f"‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n"
    text += f"üöò –ê–≤—Ç–æ: {data['car']}\n"
    text += f"üìÖ –ê—Ä–µ–Ω–¥–∞: —Å {start_str} –ø–æ {end_str} ({data['days']} –¥–Ω–µ–π)\n"
    text += f"üìç –î–æ—Å—Ç–∞–≤–∫–∞+–í–æ–∑–≤—Ä–∞—Ç: {delivery}\n"
    text += f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n\n"
    text += f"üí∞ –ê—Ä–µ–Ω–¥–∞: {data['total_price']} ‡∏ø\n"
    text += f"üöï –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_fee} ‡∏ø\n"
    text += f"üîí –î–µ–ø–æ–∑–∏—Ç: {deposit} ‡∏ø\n"
    text += f"üí≥ –ò—Ç–æ–≥–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏: {total} ‡∏ø\n\n"
    text += "‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n"
    text += "‚Äî –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞, —Ñ—Ä–∞–Ω—à–∏–∑–∞ 5,000 ‡∏ø (–∫–æ–º–ø–∞–∫—Ç/—Å–µ–¥–∞–Ω) –∏–ª–∏ 10,000 ‡∏ø (SUV/–ø–∞—Ä–∫–µ—Ç–Ω–∏–∫)\n"
    text += "‚Äî –ü–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –ø–æ –≤—Å–µ–º—É –¢–∞–∏–ª–∞–Ω–¥—É, –∫—Ä–æ–º–µ —é–∂–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü\n"
    text += "‚Äî –£–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–≥—É—Ç –≤—Å–µ, —É –∫–æ–≥–æ –µ—Å—Ç—å –ø—Ä–∞–≤–∞\n"
    text += "‚Äî –î–ª—è –±—Ä–æ–Ω–∏: —Ñ–æ—Ç–æ –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–∞ –∏ –í–£. –ù–∏–∫–∞–∫–∏—Ö –ø—Ä–µ–¥–æ–ø–ª–∞—Ç.\n\n"
    text += "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."

    bot.send_message(chat_id, text, reply_markup=ReplyKeyboardRemove())
    bot.send_message(ADMIN_ID, f"üîî –ó–∞—è–≤–∫–∞ –æ—Ç @{bot.get_chat(chat_id).username or chat_id}:\n\n{text}")

@app.route('/')
def index():
    return 'Bot is alive!'

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
        bot.process_new_updates([update])
        return '', 200
    return 'Invalid', 403

if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
